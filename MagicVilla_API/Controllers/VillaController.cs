using MagicVilla_API.Datos;
using MagicVilla_API.Modelos;
using MagicVilla_API.Modelos.Dto;
using MagicVilla_API.Servicios;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace MagicVilla_API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class VillaController : ControllerBase
    {
        private readonly ILogger<VillaController> _logger;
        private readonly AplicationDbContext _dbContext;
        public VillaController(ILogger<VillaController> logger, AplicationDbContext dbContext)
        {
            _logger = logger;
            _dbContext = dbContext;
        }

        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<IEnumerable<VillaDto>> GetVillas()
        {
            _logger.LogInformation("Obteniendo lista de villas");
            //return Ok(VillaStore.listaVillas);
            return Ok(_dbContext.Villas.ToList()); // Assuming _dbContext.Villas is a DbSet<VillaDto> or similar
        }

        [HttpGet("{id:int}", Name = "GetVilla")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<VillaDto> GetVilla(int id)
        {
            if (id == 0)
            {
                _logger.LogError("Id de villa no puede ser 0");
                return BadRequest();
            }
            //var villa = VillaStore.listaVillas.FirstOrDefault(v => v.Id == id);
            var villa = _dbContext.Villas.FirstOrDefault(v => v.Id == id); // Assuming _dbContext.Villas is a DbSet<VillaDto> or similar
            if (villa == null)
            {
                return NotFound();
            }
            return Ok(villa);
        }

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public ActionResult<VillaDto> CrearVilla([FromBody] VillaDto villaDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            //if(VillaStore.listaVillas.FirstOrDefault(v => v.Nombre.ToLower() == villaDto.Nombre.ToLower()) != null)
            if (_dbContext.Villas.Any(v => v.Nombre.ToLower() == villaDto.Nombre.ToLower()))
            {
                ModelState.AddModelError("Errores Personalizados", "Villa con ese nombre ya existe!"); // Custom error message
                return BadRequest(ModelState);
            }
            if (villaDto == null)
            {
                return BadRequest(villaDto);
            }
            if (villaDto.Id > 0)
            {
                return StatusCode(StatusCodes.Status500InternalServerError);
            }
            /*
            if (VillaStore.listaVillas.Any(v => v.Id == villaDto.Id))
            {
                ModelState.AddModelError("Errores Personalizados", "La Villa ya existe!");
                return BadRequest(ModelState);
            }
            villaDto.Id = VillaStore.listaVillas.OrderByDescending(v => v.Id).FirstOrDefault()?.Id + 1 ?? 1;
            VillaStore.listaVillas.Add(villaDto);
            */

            // Create a new Villa object and add it to the database context
            Villa modelo = new()
            {
                //Id = villaDto.Id, // Assuming Id is auto-generated by the database, you might not need to set it here
                Nombre = villaDto.Nombre,
                Ocupantes = villaDto.Ocupantes,
                Superficie = villaDto.Superficie,
                ImagenUrl = villaDto.ImagenUrl,
                Amenidad = villaDto.Amenidad,
                FechaCreacion = DateTime.Now,
                FechaActualizacion = DateTime.Now
            };

            _dbContext.Villas.Add(modelo); // Add the new villa to the DbSet
            _dbContext.SaveChanges(); // Save changes to the database

            // Return the created villa with a 201 Created status code
            return CreatedAtRoute("GetVilla", new { id = villaDto.Id }, villaDto); //Llamada al método GetVilla para obtener la URL de la nueva villa creada
        }

        [HttpDelete("{id:int}", Name = "EliminarVilla")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public IActionResult EliminarVilla(int id)
        {
            if (id == 0)
            {
                return BadRequest();
            }
            //var villa = VillaStore.listaVillas.FirstOrDefault(v => v.Id == id);
            var villa = _dbContext.Villas.FirstOrDefault(v => v.Id == id); // Assuming _dbContext.Villas is a DbSet<VillaDto> or similar
            if (villa == null)
            {
                return NotFound();
            }
            _dbContext.Villas.Remove(villa); // Remove the villa from the DbSet 
            _dbContext.SaveChanges(); // Save changes to the database   
            //VillaStore.listaVillas.Remove(villa);
            return NoContent(); // Return 204 No Content status code
        }

        [HttpPut("{id:int}", Name = "ActualizarVilla")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public IActionResult ActualizarVilla(int id, [FromBody] VillaDto villaDto)
        {
           
            if (villaDto == null || id != villaDto.Id)
            {
                return BadRequest();
            }
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            /*
            var villa = VillaStore.listaVillas.FirstOrDefault(v => v.Id == id);
            if (villa == null)
            {
                return NotFound();
            }
            
            if (VillaStore.listaVillas.Any(v => v.Nombre.ToLower() == villaDto.Nombre.ToLower() && v.Id != id))
            {
                ModelState.AddModelError("Errores Personalizados", "La Villa con ese nombre ya existe!");
                return BadRequest(ModelState);
            }
            */

            MiServicio miServicio = new MiServicio(_dbContext);
            // Obtener un modelo existente
            
            // Fix for CS8600: Ensure null safety by using null conditional operator and null coalescing operator
            Villa? villaActual = _dbContext.Villas.FirstOrDefault(m => m.Id == id);
            if (villaActual == null)
            {
                // Handle the case where villaActual is null, e.g., return an error response or log the issue
                return BadRequest("La villa no existe.");
            }

            // Proceed with the rest of the code using villaActual safely
            villaActual.Nombre = "Nuevo Nombre";
            villaActual.FechaActualizacion = DateTime.Now;
            villaActual.Nombre = villaDto.Nombre;
            villaActual.Ocupantes = villaDto.Ocupantes;
            villaActual.Superficie = villaDto.Superficie;
            villaActual.ImagenUrl = villaDto.ImagenUrl;
            villaActual.Amenidad = villaDto.Amenidad;
            villaActual.FechaActualizacion = DateTime.Now;
            
            // Actualizar el modelo
            miServicio.ActualizarModelo(villaActual);

            /*
            villa.Nombre = villaDto.Nombre;
            villa.Ocupantes = villaDto.Ocupantes;
            villa.Superficie = villaDto.Superficie;
            */

            //_dbContext.Attach(modelo);
            // Update the villa in the database context
            //_dbContext.Villas.Update(modelo); // Update the villa in the DbSet
            //_dbContext.Entry(modelo).State = EntityState.Modified;
            
            //_dbContext.SaveChanges(); // Save changes to the database

            // Update other properties as needed
            return NoContent(); // Return 204 No Content status code
        }

        [HttpPatch("{id:int}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public IActionResult ActualizarVillaParcialmente(int id, JsonPatchDocument<VillaDto> patchDto)
        {
            if (patchDto == null || id == 0)
            {
                return BadRequest();
            }
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            //var villa = VillaStore.listaVillas.FirstOrDefault(v => v.Id == id);
            var villa = _dbContext.Villas.AsNoTracking().FirstOrDefault(v => v.Id == id); // Assuming _dbContext.Villas is a DbSet<VillaDto> or similar
            VillaDto villaDto = new ()
            { 
                Id = villa.Id
                , Nombre = villa.Nombre 
                , Detalle = villa.Detalle
                , Amenidad = villa.Amenidad
                , ImagenUrl = villa.ImagenUrl
                , Tarifa = villa.Tarifa
                , Ocupantes = villa.Ocupantes   
                , Superficie = (int)villa.Superficie
            }; // Create a new VillaDto object to hold the current values    
                

            if (villa == null)
            {
                return BadRequest("Error al actualizar la villa, no existe.");  
            }
            patchDto.ApplyTo(villaDto, ModelState); // Apply the patch to the villa object
            if(!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            Villa modelo = new()
            {
                Id = villaDto.Id, // Assuming Id is not auto-generated and is provided in the DTO
                Nombre = villaDto.Nombre,
                Ocupantes = villaDto.Ocupantes,
                Superficie = villaDto.Superficie,
                ImagenUrl = villaDto.ImagenUrl,
                Amenidad = villaDto.Amenidad,
                FechaActualizacion = DateTime.Now
            };

            _dbContext.Villas.Update(modelo); // Update the villa in the DbSet
            _dbContext.SaveChanges(); // Save changes to the database

            // Update other properties as needed
            return NoContent(); // Return 204 No Content status code
        }
    }
}
